from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
import asyncio
import logging
import datetime
import os
from dotenv import load_dotenv, find_dotenv
from parseit import parser
from config import cities

# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, filename="logs.log", filemode="w",
                    format="[%(asctime)s] %(levelname)s %(message)s")

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
date = ''

MOSCOW = cities[0]
MINSK = cities[1]
SPB = cities[2]
AST = cities[3]

place = ''

# –Ω–∞—á–∞–ª–æ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
load_dotenv(find_dotenv())
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher()


@dp.message(F.text == "Github –ø—Ä–æ–µ–∫—Ç–∞")
async def github_func(message: types.Message):
    await message.answer("https://github.com/NotAKes/AOWBee_bot")


@dp.message(F.text == "–ú–æ—Å–∫–≤–∞ üá∑üá∫")
async def timeMSK_func(message: types.Message):
    global place
    place = ''
    place = MOSCOW
    await choosetime_func(message)


@dp.message(F.text == "–ê—Å—Ç–∞–Ω–∞ üá∞üáø")
async def timeAST_func(message: types.Message):
    global place
    place = ''
    place = AST
    await choosetime_func(message)


@dp.message(F.text == "–°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥ üá∑üá∫")
async def timeSPB_func(message: types.Message):
    global place
    place = ''
    place = SPB
    await choosetime_func(message)


@dp.message(F.text == "–ú–∏–Ω—Å–∫ üáßüáæ")
async def timeMIN_func(message: types.Message):
    global place
    place = ''
    place = MINSK
    await choosetime_func(message)


@dp.message(F.text == "–°–µ–≥–æ–¥–Ω—èüïì")
async def today(message: types.Message):
    global date
    date = 1
    if place:
        await message.reply(
            f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now()).date(), "%d.%m.%Y")}\n</b>"
            f"\n"
            f"{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


@dp.message(F.text == "–ó–∞–≤—Ç—Ä–∞üïì")
async def yesterday(message: types.Message):
    global date
    date = 2
    if place:
        await message.reply(
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now() + datetime.timedelta(days=1)).date(), "%d.%m.%Y")}</b>\n"
            f"\n"
            f"{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


@dp.message(F.text == "3 –¥–Ω—èüóì")
async def threedays(message: types.Message):
    if place:
        for date in range(2, 5):
            await message.answer(
                f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now() + datetime.timedelta(days=date - 1)).date(), "%d.%m.%Y")}</b> \n"
                f"\n{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


@dp.message(F.text == "–ù–µ–¥–µ–ª—èüóì")
async def week(message: types.Message):
    if place:
        for date in range(2, 9):
            await message.answer(
                f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now() + datetime.timedelta(days=date - 1)).date(), "%d.%m.%Y")}</b> \n"
                f"\n"
                f"{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


# –ö–æ–º–∞–Ω–¥–∞ /menu
@dp.message(Command("menu"))
async def call_menu(message: types.Message):
    await menu(message)


# –ö–æ–º–∞–Ω–¥–∞ /place
@dp.message(Command("place"))
async def call_place(message: types.Message):
    await choose_place(message)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–≥–æ–¥—É:")
    await menu(message)


async def menu(message: types.Message):
    inp = [
        [
            types.KeyboardButton(text="Github –ø—Ä–æ–µ–∫—Ç–∞"),
            types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=inp,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é‚öôÔ∏è", reply_markup=keyboard)


async def main():
    await dp.start_polling(bot)


@dp.message(F.text == "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def choose_place(message: types.Message):
    inp = [
        [
            types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞ üá∑üá∫"),
            types.KeyboardButton(text="–ú–∏–Ω—Å–∫ üáßüáæ"),
            types.KeyboardButton(text="–°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥ üá∑üá∫"),
            types.KeyboardButton(text="–ê—Å—Ç–∞–Ω–∞ üá∞üáø")
        ],

    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=inp,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:", reply_markup=keyboard)


async def choosetime_func(message: types.Message):
    inp = [
        [
            types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—èüïì"),
            types.KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞üïì"),
            types.KeyboardButton(text="3 –¥–Ω—èüóì"),
            types.KeyboardButton(text="–ù–µ–¥–µ–ª—èüóì")
        ],

    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=inp,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è..."
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—èüïì", reply_markup=keyboard)


if __name__ == "__main__":
    asyncio.run(main())
